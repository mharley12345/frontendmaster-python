Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\mharl\pyworkshop> & c:/Users/mharl/pyworkshop/env/Scripts/activate.ps1
(env) PS C:\Users\mharl\pyworkshop> & c:/Users/mharl/pyworkshop/env/Scripts/python.exe
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 4
>>> y = 0
>>> # Integers
>>> 
>>> x = 5.0
>>> y = -3938
>>> z = 0
>>> # Float
>>> x = 5.0 
>>> y = -3484.5
>>> z = 0.0
>>> z
0.0
>>> y
-3484.5
>>> x
5.0
>>> x = 42j
>>> x
42j
>>> type(y)
<class 'float'>
>>> a = 1
>>> type(a)
<class 'int'>
>>> int(5)
5
>>> float(3.0)
3.0
>>> x + y
(-3484.5+42j)
>>> x =10
>>> y = 20
>>> x + y
30
>>> x / y
0.5
>>> 'Hello'
'Hello'
>>> "Hello"
'Hello'
>>> "Hello N's"
"Hello N's"
>>> "Hello" + "N's"
"HelloN's"
>>> "Hello" + " N's" 
"Hello N's"
>>> long_string = """ 
... 12345 
... abcd 
... efgh
... """
>>> 
>>> long_string
'\n12345 \nabcd \nefgh\n'
>>> name = "Mike"
>>> f"Hello,{name}"
'Hello,Mike'
>>> ^L
>>> ^L
>>> 
>>> 
>>> 
>>> ^L^L^L^L
>>> 
>>> 
>>> 
>>> ^L
>>> ^L
>>> 
>>> name
'Mike'
>>> a
1
>>> b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> x = 42
>>> y = 3/4
>>> z = int("7")
>>> a = float(5)
>>> name = "Mike"
>>> type(x)
<class 'int'>
>>> type(y)
<class 'float'>
>>> type(z)
<class 'int'>
>>> type(a)
<class 'float'>
>>> type(name)
<class 'str'>
>>> rent = 480
>>> per_day = rent / 30 
>>> print(per_day)
16.0
>>> print("Hello World")
Hello World
>>> print("My name is", name)
My name is Mike
>>> print("Hello, my name is %s" % name)
Hello, my name is Mike
>>> print(f"Hello,my name is {name} and I pay ${rent / 30} in rent per day")
Hello,my name is Mike and I pay $16.0 in rent per day
>>>

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\mharl\pyworkshop> & c:/Users/mharl/pyworkshop/env/Scripts/activate.ps1
(env) PS C:\Users\mharl\pyworkshop> & c:/Users/mharl/pyworkshop/env/Scripts/python.exe
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> # Fuctions 
>>> def foo():
...     print("Hello")
... 
>>> foo()
Hello
>>> def meaning_of_life():
...     return 42
... 
>>> meaning_of_life()
42
>>> called_foo = foo()
Hello
>>> called_foo
>>> x = meaning_of_life()
>>> x
42
>>> def add_numbers(x,y):
...     return x + y 
... 
>>> add_numbers(3,5)
8
>>> a = 1
>>> b = 4
>>> add_numbers(a,b)
5
>>> def oops()
  File "<stdin>", line 1
    def oops()
             ^
SyntaxError: invalid syntax
>>> def oops():
...     return "Sorry"
... 
>>> oops()
'Sorry'
>>> def greeting(name):
...     greeting = "Hello"
...     return greeting + name
... 
>>> greeting("Mike")
'HelloMike'
>>> greeting(" Mike") 
'Hello Mike'
>>> # Function Arguments
>>> def add_numbers(x,y):
...     retrun x + y
  File "<stdin>", line 2
    retrun x + y
           ^
SyntaxError: invalid syntax
>>> def add_numbers(x,y):
...     return x + y
...        
...   
>>> add_numbers(3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_numbers() missing 1 required positional argument: 'y'
>>> def say_greeting(name, greeting="Hello"):
...     print(f"{greeting}, {name}")
... 
>>> say_greeting("Mike")
Hello, Mike
>>> say_greeting("Mike", "Hola") 
Hola, Mike
>>> def create_query(langueage="Javascript",num_start=50, sort="desc"):
...     return f"language: {language}, {num_start} {sort}"
... 
>>> create_query()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in create_query
NameError: name 'language' is not defined
>>> def create_query(language="Javascript",num_start=50, sort="desc"):  
... 
  File "<stdin>", line 2

    ^
IndentationError: expected an indented block
>>> def create_query(language="Javascript",num_start=50, sort="desc"):
...     return f"language: {language}, {num_start} {sort}"
... 
>>> create_query()
'language: Javascript, 50 desc'
>>> ^L
>>> 
>>> def add_numbers(x , y):
...     return x + y
... 
>>> add_numbers(5,5)
10
>>> def add_numbers(x,y):
...     print(f"The sum of {x} and {y} is {add_number^Z^Z^Z
  File "<stdin>", line 2
    print(f"The sum of {x} and {y} is {add_number
                                                   ^
SyntaxError: EOL while scanning string literal
>>> add_numbers(4,5)
9
>>> print(f"The sum of x and y is {add_numbers(1,2)}")
The sum of x and y is 3